/**
 * 类型 - 数组
 * 特点 - 连续的,顺序的存储结构,通过数组索引下标访问
 * 优点 - 按照索引查询快,遍历方便
 * 缺点 - 新增,删除操作会移动其他元素
**/

/**
 * 类型 - 栈(zhàn)
 * 特点 - 特殊的线性表,只允许在顶端推入或弹出,先进后出,后进先出
 * 
 * n+1弹出      n+1推入
 * ↖         ↙
 *   ↖     ↙
 *   |___n___|
 *   |__n-1__|
 *   |__...__|
 *   |___3___|
 *   |___2___|
 *   |___1___|
**/

/**
 * 类型 - 队列
 * 特点 - 特殊的线性表,允许在一端推入然后再另一端弹出,先进先出,后进后出
 *        _____________________________
 *       |   |     |     |     |   |   |   
 * n+1 → | n | n-1 | n-2 | ... | 3 | 2 | → 1
 *       |___|_____|_____|_____|___|___|
**/

/**
 * 类型 - 链表
 * 特点 - 非连续的,非顺序的存储结构,Data+Next指针(+Prev指针)
 * 优点 - 添加,删除只需要改变前后两个元素的指针地址,操作会快
 * 缺点 - 指针多会占用空间,遍历耗时
 * 
 * 单向链表
 *  _____________     _____________     _____________     ______
 * |      |      |   |      |      |   |      |      |   |      |
 * | Data | Next | → | Data | Next | → | Data | Next | → | Null |
 * |______|______|   |______|______|   |______|______|   |______|
 * 
 * 双向链表
 *                             ______________           _____________          ________
 *  ______   ________________↗__    _________↘______↗__   _________↘______↗__   ___↘__
 * |      | |      |      |      |  |      |      |      |  |      |      |      |  |      |
 * | Null | | Prev | Data | Next |  | Prev | Data | Next |  | Prev | Data | Next |  | Null |
 * |______| |______|______|______|  |______|______|______|  |______|______|______|  |______|
 *    ↖_______↙      ↖______________↙      ↖______________↙
 * 
 * 单向循环链表
 *  _____________     _____________     _____________     _____________
 * |      |      |   |      |      |   |      |      |   |      |      |
 * | Data | Next | → | Data | Next | → | Data | Next | → | Data | Next |
 * |______|______|   |______|______|   |______|______|   |______|______|
 *    ↖__________________________________________________________↙
 * 
 * 双向循环链表
 *               _______________________________________________________
 *             ↙     ______________           _____________           ↗
 *  _________↙_____↗__    _________↘______↗__   _________↘______↗__
 * |      |      |      |  |      |      |      |  |      |      |      |
 * | Prev | Data | Next |  | Prev | Data | Next |  | Prev | Data | Next |
 * |______|______|______|  |______|______|______|  |______|______|______|
 *     ↘     ↖______________↙      ↖______________↙     ↗
 *       ↘________________________________________________↗
**/

/**
 * 类型 - 树
 * 特点 - 可以是链表结构也可以是数组结构 1.非根节点有且只有一个父节点 2.没有父节点的节点称为根节点 3.子节点都可以分出不相交的树
 *  
 *      三叉树         二叉查找树                             
 *        R                50                                                                                                                       
 *     /  |  \            /  \                                                                                                                            
 *    A   B   C         21    76                                                                                                                              
 *  /   \     |        /  \   / \                                                                                                                                
 * D     E    F       4   32 64 100                                                                                                                                 
 *          / | \           /                                                                                                                            
 *         G  H  I        52                                                                                                                             
**/

/**
 * 类型 - 散列表(哈希表或者Hash表)
 * 特点 - 根据关键码值(key value)而直接进行访问的数组数据结构,根据关键码然后通过散列函数就可以取得数组下标,这样就获取到了对应值
 * 问题 - 哈希冲突: 一般使用链表法来存放它们的关键码或者开放寻址法动态存储,用动态扩容来减少冲突的概率
 *  _______
 * |___0___| → value                                  key           常用散列法
 * |___1___| → value                                   ↓              
 * |___2___| → value                                散列函数         除法散列法 index = key % array.length  
 * |___3___| → value                                fn(key)          随机数法 f(key) = random(key)
 * |___4___| → value                                   ↓             数字分析法 177XXXX1234 1234为用户编号 
 * |___5___| → {key,value} → {key,value} → null      index           平方取中法 index = (key * key) >> 2^8
 * |___6___| → value                                   ↓             直接寻址法 index = a(操作)key + b 
 * |___7___| → value                                 value                    
**/

/**
 * 类型 - 堆
 * 特点 - 可以被看做一棵树的数组数据结构 1.堆中某个节点的值总是不大于或不小于其父节点的值 2.堆总是一棵完全二叉树
 *                 
 *    大顶堆                   小顶堆       
 *      50                       0      
 *     /  \                    /   \     
 *   33    22                 1     2   
 *  /  \   / \               / \   / \  
 * 32   4 10 21             3   4 5   6    
 * [50,33,22,32,4,10,21]    [0,1,2,3,4,5,6]                                                                                                    
**/

/**
 * 类型 - 图
 * 特点 - 复杂的非线性结构,较为复杂,后期整理
 * 
 * 无向图 有向图 无权图 有全图
 *                                                                                                                        
**/
